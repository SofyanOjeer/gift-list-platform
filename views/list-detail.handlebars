<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1>{{list.name}}</h1>
        <p class="text-muted">{{list.description}}</p>
        <div>
            <span class="badge bg-primary">{{list.views}} vues</span>
            {{#if (eq list.visibility 'public')}}
                <span class="badge bg-success">Public</span>
            {{else if (eq list.visibility 'private')}}
                <span class="badge bg-warning">Priv√©</span>
            {{else}}
                <span class="badge bg-secondary">Non list√©</span>
            {{/if}}
        </div>
    </div>
    <div>
        {{#if isOwner}}
            <a href="/stats/list/{{list.id}}" class="btn btn-outline-info me-2">
                <i class="fas fa-chart-bar me-2"></i>Statistiques
            </a>
            <button class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#addItemModal">
                <i class="fas fa-plus me-1"></i>Ajouter un article
            </button>
            <!-- BOUTON SUPPRESSION -->
            <button class="btn btn-danger" id="deleteListBtn" data-list-id="{{list.id}}" data-list-name="{{list.name}}">
                <i class="fas fa-trash me-1"></i>Supprimer la liste
            </button>
        {{/if}}
    </div>
</div>

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h5 class="mb-0"><i class="fas fa-gifts me-2"></i>Articles ({{items.length}})</h5>
                {{#if isOwner}}
                    <!-- BOUTON SECONDAIRE DANS L'EN-T√äTE -->
                    <button class="btn btn-light btn-sm" data-bs-toggle="modal" data-bs-target="#addItemModal">
                        <i class="fas fa-plus me-1"></i>Nouvel article
                    </button>
                {{/if}}
            </div>
            <div class="card-body">
                {{#if items.length}}
                    {{#each items}}
                        <div class="card mb-3">
                            <div class="card-body">
                                <div class="row">
                                    {{#if this.image}}
                                    <div class="col-md-3">
                                        <img src="{{this.image}}" alt="{{this.name}}" class="img-fluid rounded" style="max-height: 150px; object-fit: cover;">
                                    </div>
                                    {{/if}}
                                    <div class="{{#if this.image}}col-md-9{{else}}col-12{{/if}}">
                                        <h5 class="card-title">{{this.name}}</h5>
                                        <p class="card-text">{{this.description}}</p>
                                        
                                        <div class="row mb-2">
                                            {{#if ../list.show_prices}}
                                            <div class="col">
                                                <strong>Prix:</strong> {{formatPrice this.price}}
                                            </div>
                                            {{/if}}
                                            <div class="col">
                                                {{#if ../isOwner}}
                                                    <strong>Quantit√©:</strong> {{this.quantity}} disponible(s)
                                                {{else}}
                                                    <strong>Quantit√©:</strong> 
                                                    <span class="quantity-display">{{this.reserved_quantity}}/{{this.quantity}} r√©serv√©(s)</span>
                                                {{/if}}
                                            </div>
                                        </div>
                                        
                                        {{#if this.url}}
                                        <div class="mb-2">
                                            <a href="{{this.url}}" target="_blank" class="btn btn-sm btn-outline-primary">
                                                <i class="fas fa-external-link-alt me-1"></i>Voir le produit
                                            </a>
                                        </div>
                                        {{/if}}
                                        
                                        {{#unless ../isOwner}}
                                            {{#if (gt this.quantity this.reserved_quantity)}}
                                            <button class="btn btn-success btn-sm reserve-btn" 
                                                    data-item-id="{{this.id}}"
                                                    data-item-name="{{this.name}}"
                                                    data-max-quantity="{{subtract this.quantity this.reserved_quantity}}"
                                                    data-total-quantity="{{this.quantity}}"
                                                    data-user-email="{{../user.email}}">
                                                <i class="fas fa-shopping-cart me-1"></i>R√©server
                                            </button>
                                            {{else}}
                                            <span class="badge bg-secondary">Complet</span>
                                            {{/if}}
                                        {{/unless}}
                                    </div>
                                </div>
                            </div>
                        </div>
                    {{/each}}
                {{else}}
                    <div class="text-center py-4">
                        <i class="fas fa-gift fa-3x text-muted mb-3"></i>
                        <p class="text-muted">Aucun article dans cette liste</p>
                        {{#if isOwner}}
                            <!-- BOUTON DANS L'√âTAT VIDE -->
                            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addItemModal">
                                <i class="fas fa-plus me-1"></i>Ajouter le premier article
                            </button>
                        {{/if}}
                    </div>
                {{/if}}
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card mb-4">
            <div class="card-header bg-info text-white">
                <h5 class="mb-0"><i class="fas fa-info-circle me-2"></i>Informations</h5>
            </div>
            <div class="card-body">
                <p><strong>Cr√©√©e par:</strong> {{list.creator_username}}</p>
                <p><strong>Visibilit√©:</strong> 
                    {{#if (eq list.visibility 'public')}}
                        üåç Public - <small class="text-muted">Visible sur le profil</small>
                    {{else}}
                        üîí Priv√©e - <small class="text-muted">Acc√®s par lien seulement</small>
                    {{/if}}
                </p>
                
                {{#if isOwner}}
                    <div class="mb-3">
                        <label class="form-label"><strong>Partager cette liste:</strong></label>
                        <div class="input-group">
                            <input type="text" class="form-control" id="shareLink" 
                                   value="{{../baseUrl}}/lists/{{list.id}}" readonly>
                            <button id="copyShareBtn" class="btn btn-outline-secondary btn-sm">
                                <i class="fas fa-link me-1"></i> Copier le lien
                            </button>
                        </div>
                        <small class="form-text text-muted">
                            Partagez ce lien pour donner acc√®s √† votre liste
                        </small>
                    </div>
                    {{#eq list.visibility 'private'}}
                    <div class="mb-3">
                        <a href="/lists/{{list.id}}/members" class="btn btn-outline-primary btn-sm">
                            üë• G√©rer les membres
                        </a>
                    </div>
                    {{/eq}}
                {{else}}
                    {{#if userFollowsList}}
                        <button class="btn btn-outline-danger w-100 unfollow-btn" 
                                data-list-id="{{list.id}}"
                                data-list-name="{{list.name}}">
                            <i class="fas fa-times me-2"></i>Ne plus suivre
                        </button>
                    {{else}}
                        <button class="btn btn-outline-primary w-100 follow-btn" data-list-id="{{list.id}}">
                            <i class="fas fa-heart me-2"></i>Suivre cette liste
                        </button>
                    {{/if}}
                {{/if}}
            </div>
        </div>
    </div>

    <!-- Sidebar avec commentaires -->
                <div class="col-lg-4">
                    <!-- Section commentaires -->
                    <div class="card sticky-top" style="top: 20px;">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">
                                <i class="fas fa-comments me-2"></i>
                                Commentaires
                                <span class="badge bg-light text-dark ms-2">{{comments.length}}</span>
                            </h5>
                        </div>
                        
                        <div class="card-body p-0">
                            {{#if list.allow_comments}}
                                <!-- Formulaire de commentaire -->
                                <div class="p-3 border-bottom">
                                    <form id="commentForm" class="comment-form">
                                        <div class="mb-3">
                                            <textarea 
                                                class="form-control" 
                                                id="commentContent" 
                                                rows="3" 
                                                placeholder="Ajouter un commentaire..."
                                                maxlength="500"
                                                required></textarea>
                                            <div class="form-text text-end">
                                                <span id="commentCounter">0</span>/500 caract√®res
                                            </div>
                                        </div>
                                        
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" id="isAnonymous">
                                                <label class="form-check-label small" for="isAnonymous">
                                                    Poster anonymement
                                                </label>
                                            </div>
                                            <button type="submit" class="btn btn-primary btn-sm">
                                                <i class="fas fa-paper-plane me-1"></i> Poster
                                            </button>
                                        </div>
                                    </form>
                                </div>
                            {{else}}
                                <!-- Message si commentaires d√©sactiv√©s -->
                                <div class="p-3 text-center text-muted">
                                    <i class="fas fa-comment-slash fa-2x mb-2"></i>
                                    <p class="mb-0">Les commentaires sont d√©sactiv√©s pour cette liste</p>
                                </div>
                            {{/if}}
                            
                            <!-- Liste des commentaires -->
                            <div id="commentsContainer" class="comments-container" style="max-height: 500px; overflow-y: auto;">
                                {{#if comments.length}}
                                    {{#each comments}}
                                        <div class="comment-item p-3 border-bottom" data-comment-id="{{this.uuid}}">
                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                <div class="d-flex align-items-center">
                                                    <div class="avatar-sm bg-primary text-white rounded-circle d-flex align-items-center justify-content-center me-2"
                                                         style="width: 32px; height: 32px; font-size: 0.8rem;">
                                                        {{#if this.is_anonymous}}
                                                            ?
                                                        {{else}}
                                                            {{getInitials this.author}}
                                                        {{/if}}
                                                    </div>
                                                    <div>
                                                        <strong class="small">
                                                            {{#if this.is_anonymous}}
                                                                Anonyme
                                                            {{else}}
                                                                {{this.author}}
                                                            {{/if}}
                                                        </strong>
                                                        {{#if this.item_name}}
                                                            <span class="badge bg-light text-dark ms-2" title="Commentaire sur l'article: {{this.item_name}}">
                                                                <i class="fas fa-cube me-1"></i>
                                                            </span>
                                                        {{/if}}
                                                    </div>
                                                </div>
                                                <small class="text-muted">{{formatRelativeDate this.created_at}}</small>
                                            </div>
                                            <p class="mb-0 text-break">{{this.content}}</p>
                                            
                                            {{#if ../isOwner}}
                                                <div class="mt-2 text-end">
                                                    <button class="btn btn-sm btn-outline-danger delete-comment" 
                                                            data-comment-id="{{this.uuid}}"
                                                            title="Supprimer le commentaire">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            {{/if}}
                                        </div>
                                    {{/each}}
                                {{else}}
                                    <div class="text-center py-4 text-muted">
                                        <i class="fas fa-comments fa-2x mb-2 opacity-50"></i>
                                        <p class="mb-0">Aucun commentaire</p>
                                        <small>Soyez le premier √† commenter !</small>
                                    </div>
                                {{/if}}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



{{#if isOwner}}
<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header bg-success text-white">
                <h5 class="mb-0"><i class="fas fa-info-circle me-2"></i>Information</h5>
            </div>
            <div class="card-body text-center">
                <i class="fas fa-gift fa-2x text-success mb-3"></i>
                <p class="mb-0">
                    <strong>La surprise est pr√©serv√©e !</strong><br>
                    Vous ne verrez pas qui a r√©serv√© vos articles ni les quantit√©s r√©serv√©es.<br>
                    Les r√©servations sont anonymes par d√©faut pour une vraie surprise üéÅ
                </p>
            </div>
        </div>
    </div>
</div>
{{/if}}

<!-- Modal pour ajouter un item -->
<div class="modal fade" id="addItemModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Ajouter un article</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addItemForm" action="/items/{{list.id}}" method="POST">
                    <!-- URL avec extraction automatique -->
                    <div class="mb-3">
                        <label for="itemUrl" class="form-label">
                            <i class="fas fa-link me-1"></i>URL du produit
                        </label>
                        <div class="input-group">
                            <input type="url" class="form-control" id="itemUrl" 
                                   name="url" placeholder="https://..." 
                                   pattern="https?://.+" required>
                            <button type="button" class="btn btn-outline-primary" id="extractInfoBtn">
                                <i class="fas fa-magic me-1"></i>Extraire
                            </button>
                        </div>
                        <div class="form-text">
                            Collez l'URL du produit pour extraire automatiquement les informations
                        </div>
                    </div>

                    <!-- Indicateur de chargement -->
                    <div id="extractionLoading" class="alert alert-info d-none">
                        <i class="fas fa-spinner fa-spin me-2"></i>
                        Extraction des informations en cours...
                    </div>

                    <!-- R√©sultat de l'extraction -->
                    <div id="extractionResult" class="card d-none mb-3">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-3">
                                    <img id="extractedImage" src="" class="img-fluid rounded" 
                                         style="max-height: 100px; object-fit: cover;">
                                </div>
                                <div class="col-md-9">
                                    <h6 id="extractedTitle" class="card-title"></h6>
                                    <p id="extractedDescription" class="card-text small text-muted"></p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span id="extractedPrice" class="fw-bold text-primary"></span>
                                        <small class="text-success">
                                            <i class="fas fa-check me-1"></i>Informations extraites
                                        </small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Champs du formulaire -->
                    <div class="row">
                        <div class="col-md-8">
                            <div class="mb-3">
                                <label for="itemName" class="form-label">Nom de l'article</label>
                                <input type="text" class="form-control" id="itemName" name="name" required>
                            </div>
                        </div>
<div class="col-md-4">
    <div class="mb-3">
        <label for="itemPrice" class="form-label">Prix (‚Ç¨)</label>
        <input type="text" class="form-control" id="itemPrice" name="price" 
               placeholder="0,00" pattern="[0-9]+([,][0-9]{1,2})?">
        <small class="form-text text-muted">Utilisez une virgule pour les d√©cimales</small>
    </div>
</div>
                    </div>

                    <div class="mb-3">
                        <label for="itemDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="itemDescription" name="description" 
                                  rows="3" placeholder="Description optionnelle..."></textarea>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="itemImage" class="form-label">Image URL</label>
                                <input type="url" class="form-control" id="itemImage" name="image" 
                                       placeholder="https://...">
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label for="itemQuantity" class="form-label">Quantit√©</label>
                                <input type="number" class="form-control" id="itemQuantity" name="quantity" 
                                       value="1" min="1" max="100">
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-plus me-1"></i>Ajouter l'article
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<body data-is-owner="{{isOwner}}">

<!-- En bas de list-detail.handlebars -->
{{> reservation-modal}}

<script>
// Fonction pour copier le lien de partage
function copyShareLink() {
    const shareLink = '{{baseUrl}}/lists/{{list.id}}';
    navigator.clipboard.writeText(shareLink).then(() => {
        const copyBtn = document.getElementById('copyShareBtn');
        const originalText = copyBtn.innerHTML;
        copyBtn.innerHTML = '<i class="fas fa-check me-1"></i> Copi√© !';
        copyBtn.className = 'btn btn-success btn-sm';
        
        setTimeout(() => {
            copyBtn.innerHTML = originalText;
            copyBtn.className = 'btn btn-outline-secondary btn-sm';
        }, 2000);
    }).catch(err => {
        console.error('Erreur copie:', err);
        alert('Erreur lors de la copie du lien');
    });
}

// Formatage du prix
function formatPrice(value) {
    if (!value) return '';
    
    // Remplacer virgule par point pour le calcul
    const numericValue = parseFloat(value.toString().replace(',', '.'));
    
    if (!isNaN(numericValue) && numericValue >= 0) {
        // Arrondir √† 2 d√©cimales et formater avec virgule
        return (Math.round(numericValue * 100) / 100).toFixed(2).replace('.', ',');
    }
    return value; // Retourner la valeur originale si non num√©rique
}

// Code principal
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Script initialis√©');
    
    // GESTION DU PRIX - SIMPLIFI√âE
    const priceInput = document.getElementById('itemPrice');
    if (priceInput) {
        console.log('‚úÖ Champ prix trouv√©');
        
        // Formatage quand on quitte le champ
        priceInput.addEventListener('blur', function() {
            console.log('üìù Formatage prix:', this.value);
            this.value = formatPrice(this.value);
        });
        
        // Validation pendant la saisie
        priceInput.addEventListener('input', function(e) {
            // Permettre seulement chiffres et virgule
            this.value = this.value.replace(/[^\d,]/g, '');
            
            // Emp√™cher plus d'une virgule
            const commas = (this.value.match(/,/g) || []).length;
            if (commas > 1) {
                this.value = this.value.replace(/,+$/, '').slice(0, -1);
            }
        });
    }

    // GESTION DE L'EXTRACTION
    const extractBtn = document.getElementById('extractInfoBtn');
    const itemUrl = document.getElementById('itemUrl');
    
    if (extractBtn && itemUrl) {
        extractBtn.addEventListener('click', extractProductInfo);
        
        // Extraction automatique
        let extractTimeout;
        itemUrl.addEventListener('input', function() {
            clearTimeout(extractTimeout);
            const url = this.value.trim();
            if (url && isValidUrl(url)) {
                extractTimeout = setTimeout(extractProductInfo, 1500);
            }
        });
    }

    async function extractProductInfo() {
        const url = itemUrl.value.trim();
        console.log('üéØ Extraction pour URL:', url);
        
        if (!url || !isValidUrl(url)) {
            alert('Veuillez entrer une URL valide');
            return;
        }

        const extractionLoading = document.getElementById('extractionLoading');
        const extractionResult = document.getElementById('extractionResult');
        const extractBtn = document.getElementById('extractInfoBtn');

        // Affichage loading
        extractionLoading.classList.remove('d-none');
        extractionResult.classList.add('d-none');
        extractBtn.disabled = true;
        extractBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Extraction...';

        try {
            console.log('üì° Envoi requ√™te extraction...');
            const response = await fetch('/api/extract-product-info', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ url })
            });

            if (!response.ok) throw new Error(`HTTP ${response.status}`);
            
            const result = await response.json();
            console.log('üìä R√©sultat extraction COMPLET:', result);

            if (result.success) {
                // Remplir les champs
                if (result.title) {
                    document.getElementById('itemName').value = result.title;
                    document.getElementById('extractedTitle').textContent = result.title;
                    console.log('‚úÖ Titre rempli:', result.title);
                }
                
                if (result.price) {
                    console.log('üí∞ Prix √† traiter:', result.price, 'Type:', typeof result.price);
                    
                    // Formater le prix imm√©diatement
                    const formattedPrice = formatPrice(result.price);
                    console.log('üî¢ Prix format√©:', formattedPrice);
                    
                    document.getElementById('itemPrice').value = formattedPrice;
                    document.getElementById('extractedPrice').textContent = formattedPrice + ' ‚Ç¨';
                    console.log('‚úÖ Prix ins√©r√© dans le champ');
                } else {
                    console.log('‚ùå Aucun prix dans la r√©ponse');
                }
                
                if (result.description) {
                    document.getElementById('itemDescription').value = result.description;
                    document.getElementById('extractedDescription').textContent = result.description;
                    console.log('‚úÖ Description remplie');
                }
                
                if (result.image) {
                    document.getElementById('itemImage').value = result.image;
                    document.getElementById('extractedImage').src = result.image;
                    document.getElementById('extractedImage').style.display = 'block';
                    console.log('‚úÖ Image remplie');
                } else {
                    document.getElementById('extractedImage').style.display = 'none';
                }

                extractionResult.classList.remove('d-none');
                showNotification('‚úÖ Informations extraites avec succ√®s !', 'success');
                
            } else {
                console.log('‚ùå Extraction √©chou√©e:', result.error);
                showNotification('‚ùå ' + (result.error || 'Erreur extraction'), 'error');
            }

        } catch (error) {
            console.error('üí• Erreur extraction:', error);
            showNotification('‚ùå Erreur lors de l\'extraction', 'error');
        } finally {
            extractionLoading.classList.add('d-none');
            extractBtn.disabled = false;
            extractBtn.innerHTML = '<i class="fas fa-magic me-1"></i>Extraire';
        }
    }

    function isValidUrl(string) {
        try {
            new URL(string);
            return true;
        } catch (_) {
            return false;
        }
    }

    function showNotification(message, type) {
        const alertClass = type === 'error' ? 'alert-danger' : 'alert-success';
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert ${alertClass} alert-dismissible fade show position-fixed`;
        alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 1060; min-width: 300px;';
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(alertDiv);
        
        setTimeout(() => {
            if (alertDiv.parentNode) alertDiv.parentNode.removeChild(alertDiv);
        }, 5000);
    }

    // Copie du lien
    const copyBtn = document.getElementById('copyShareBtn');
    if (copyBtn) {
        copyBtn.addEventListener('click', copyShareLink);
    }

    // R√©initialisation du modal
    const addItemModal = document.getElementById('addItemModal');
    if (addItemModal) {
        addItemModal.addEventListener('hidden.bs.modal', function() {
            const form = document.getElementById('addItemForm');
            if (form) {
                form.reset();
                console.log('üîÑ Formulaire r√©initialis√©');
            }
            
            const extractionResult = document.getElementById('extractionResult');
            if (extractionResult) {
                extractionResult.classList.add('d-none');
                console.log('üîÑ R√©sultat extraction cach√©');
            }
        });
    }
});
</script>

<!-- Modal de confirmation de suppression -->
<div class="modal fade" id="deleteListModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmer la suppression</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>√ätes-vous s√ªr de vouloir supprimer la liste <strong id="deleteListName"></strong> ?</p>
                <p class="text-danger">
                    <i class="fas fa-exclamation-triangle me-1"></i>
                    <strong>Attention :</strong> Cette action est irr√©versible. Tous les articles, r√©servations et commentaires seront √©galement supprim√©s.
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                    <i class="fas fa-trash me-1"></i>Supprimer d√©finitivement
                </button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const deleteListBtn = document.getElementById('deleteListBtn');
    const deleteListModal = new bootstrap.Modal(document.getElementById('deleteListModal'));
    const deleteListName = document.getElementById('deleteListName');
    const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
    
    let listToDelete = null;

    if (deleteListBtn) {
        deleteListBtn.addEventListener('click', function() {
            const listId = this.dataset.listId;
            const listName = this.dataset.listName;
            
            listToDelete = listId;
            deleteListName.textContent = listName;
            deleteListModal.show();
        });
    }

    if (confirmDeleteBtn) {
        confirmDeleteBtn.addEventListener('click', async function() {
            if (!listToDelete) return;
            
            const btn = this;
            const originalText = btn.innerHTML;
            
            btn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Suppression...';
            btn.disabled = true;
            
            try {
                const response = await fetch(`/lists/${listToDelete}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Redirection vers la page d'accueil
                    window.location.href = '/home';
                } else {
                    alert('Erreur: ' + result.error);
                    deleteListModal.hide();
                }
                
            } catch (error) {
                console.error('Erreur suppression:', error);
                alert('Erreur lors de la suppression');
                deleteListModal.hide();
            } finally {
                btn.innerHTML = originalText;
                btn.disabled = false;
            }
        });
    }
});
</script>

<style>
/* Styles pour les gestes tactiles */
.notification-item {
    transition: all 0.3s ease;
    touch-action: pan-y;
}

.list-item-touch {
    transition: all 0.3s ease;
    touch-action: pan-y;
}

.swipe-delete {
    background: linear-gradient(90deg, #dc3545, #ff6b7a);
    color: white;
    display: flex;
    align-items: center;
    justify-content: flex-end;
    padding: 0 20px;
}

.swipe-actions {
    position: absolute;
    right: 0;
    top: 0;
    height: 100%;
    display: flex;
    align-items: center;
    background: #dc3545;
    color: white;
    padding: 0 15px;
    border-radius: 0 8px 8px 0;
    opacity: 0;
    transition: opacity 0.3s ease;
}

/* Am√©liorations mobile */
@media (max-width: 768px) {
    .card {
        border-radius: 12px;
        margin-bottom: 12px;
    }
    
    .btn {
        padding: 10px 16px;
        font-size: 14px;
    }
    
    /* Agrandir les zones cliquables */
    .notification-item,
    .list-item-touch {
        min-height: 60px;
        padding: 15px;
    }
    
    /* Feedback tactile */
    .btn:active,
    .notification-item:active,
    .list-item-touch:active {
        background-color: #f8f9fa;
        transform: scale(0.98);
    }
}

/* Pull to refresh */
.pull-indicator {
    text-align: center;
    padding: 10px;
    color: #6c757d;
    display: none;
}

.refreshing {
    display: block;
}
</style>

<script>
// Gestion des gestes tactiles pour les articles
class TouchGestureManager {
    constructor() {
        this.touchStartX = 0;
        this.touchStartY = 0;
        this.isScrolling = false;
        this.init();
    }

    init() {
        console.log('üëÜ Initialisation gestes tactiles');
        this.setupItemGestures();
        this.setupPullToRefresh();
    }

    setupItemGestures() {
        const items = document.querySelectorAll('.card.mb-3');
        
        items.forEach(item => {
            item.classList.add('list-item-touch');
            let touchStartX = 0;
            let isSwiping = false;

            item.addEventListener('touchstart', (e) => {
                touchStartX = e.touches[0].clientX;
                isSwiping = false;
            }, { passive: true });

            item.addEventListener('touchmove', (e) => {
                if (!touchStartX) return;
                
                const touchX = e.touches[0].clientX;
                const diffX = touchStartX - touchX;
                
                if (Math.abs(diffX) > 10) {
                    isSwiping = true;
                    e.preventDefault(); // Emp√™cher le scroll pendant le swipe
                    
                    if (diffX > 0) { // Swipe gauche
                        item.style.transform = `translateX(-${Math.min(diffX, 80)}px)`;
                    }
                }
            }, { passive: false });

            item.addEventListener('touchend', (e) => {
                if (!touchStartX) return;
                
                const touchX = e.changedTouches[0].clientX;
                const diffX = touchStartX - touchX;
                
                if (isSwiping && diffX > 60) { // Swipe gauche suffisant
                    this.showItemActions(item);
                } else {
                    // Reset position
                    item.style.transform = '';
                    
                    // Si pas de swipe, c'est un tap normal
                    if (!isSwiping && diffX < 10) {
                        this.handleItemTap(item);
                    }
                }
                
                touchStartX = 0;
                isSwiping = false;
            }, { passive: true });
        });
    }

    showItemActions(item) {
        // Animation de swipe avec options
        item.style.transition = 'transform 0.3s ease';
        item.style.transform = 'translateX(-80px)';
        
        // Cr√©er les actions swipe (optionnel - pour future fonctionnalit√©)
        setTimeout(() => {
            item.style.transform = ''; // Revenir √† la position initiale apr√®s 2s
        }, 2000);
    }

    handleItemTap(item) {
        // Feedback visuel du tap
        item.style.backgroundColor = '#f8f9fa';
        setTimeout(() => {
            item.style.backgroundColor = '';
        }, 200);
        
        // Vous pouvez ajouter une action au tap ici
        console.log('Tap sur item:', item);
    }

    setupPullToRefresh() {
        let touchStartY = 0;
        let isPullToRefresh = false;
        const pullIndicator = document.createElement('div');
        pullIndicator.className = 'pull-indicator';
        pullIndicator.innerHTML = '<i class="fas fa-sync-alt fa-spin me-2"></i>Actualisation...';
        
        const mainContent = document.querySelector('.card-body');
        if (mainContent) {
            mainContent.parentNode.insertBefore(pullIndicator, mainContent);
            
            document.addEventListener('touchstart', (e) => {
                if (window.scrollY === 0) {
                    touchStartY = e.touches[0].clientY;
                    isPullToRefresh = true;
                }
            }, { passive: true });

            document.addEventListener('touchmove', (e) => {
                if (!isPullToRefresh) return;
                
                const touchY = e.touches[0].clientY;
                const diffY = touchY - touchStartY;
                
                if (diffY > 0) {
                    pullIndicator.style.display = 'block';
                    pullIndicator.style.transform = `translateY(${Math.min(diffY, 60)}px)`;
                    
                    if (diffY > 100) {
                        pullIndicator.classList.add('refreshing');
                    }
                }
            }, { passive: true });

            document.addEventListener('touchend', (e) => {
                if (!isPullToRefresh) return;
                
                const touchY = e.changedTouches[0].clientY;
                const diffY = touchY - touchStartY;
                
                if (diffY > 100) {
                    // Pull to refresh d√©clench√©
                    location.reload();
                } else {
                    // Reset
                    pullIndicator.style.display = 'none';
                    pullIndicator.style.transform = '';
                    pullIndicator.classList.remove('refreshing');
                }
                
                isPullToRefresh = false;
                touchStartY = 0;
            }, { passive: true });
        }
    }
}

// Initialisation des gestes tactiles
document.addEventListener('DOMContentLoaded', function() {
    if ('ontouchstart' in window) {
        new TouchGestureManager();
    }
});
</script>


<!-- Styles pour les commentaires -->
<style>
.comments-container::-webkit-scrollbar {
    width: 6px;
}

.comments-container::-webkit-scrollbar-track {
    background: #f8f9fa;
}

.comments-container::-webkit-scrollbar-thumb {
    background: #dee2e6;
    border-radius: 3px;
}

.comment-item {
    transition: background-color 0.2s ease;
}

.comment-item:hover {
    background-color: #f8f9fa;
}

.avatar-sm {
    font-weight: 600;
}

.sticky-top {
    position: sticky;
    z-index: 10;
}

.comment-form {
    transition: all 0.3s ease;
}
</style>

<!-- Scripts pour les commentaires -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    const commentForm = document.getElementById('commentForm');
    const commentsContainer = document.getElementById('commentsContainer');
    const commentContent = document.getElementById('commentContent');
    const commentCounter = document.getElementById('commentCounter');
    const isAnonymous = document.getElementById('isAnonymous');

    // Compteur de caract√®res
    if (commentContent && commentCounter) {
        commentContent.addEventListener('input', function() {
            const length = this.value.length;
            commentCounter.textContent = length;
            
            if (length > 450) {
                commentCounter.classList.add('text-warning');
            } else if (length > 490) {
                commentCounter.classList.add('text-danger');
            } else {
                commentCounter.classList.remove('text-warning', 'text-danger');
            }
        });
    }

    // Soumission du formulaire
    if (commentForm) {
        commentForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const content = commentContent.value.trim();
            if (!content) {
                alert('Veuillez saisir un commentaire');
                return;
            }

            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            
            // Indicateur de chargement
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>';
            submitBtn.disabled = true;

            try {
                const response = await fetch(`/lists/{{list.id}}/comments`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        content: content,
                        isAnonymous: isAnonymous.checked
                    })
                });

                const data = await response.json();

                if (data.success) {
                    // Ajouter le nouveau commentaire √† la liste
                    addCommentToUI(data.comment);
                    
                    // R√©initialiser le formulaire
                    commentContent.value = '';
                    commentCounter.textContent = '0';
                    commentCounter.className = '';
                    isAnonymous.checked = false;
                    
                    // Message de succ√®s
                    showAlert('Commentaire ajout√© avec succ√®s!', 'success');
                } else {
                    throw new Error(data.error);
                }
            } catch (error) {
                console.error('Erreur:', error);
                showAlert('Erreur: ' + error.message, 'error');
            } finally {
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            }
        });
    }

    // Suppression des commentaires (pour le propri√©taire)
    document.querySelectorAll('.delete-comment').forEach(button => {
        button.addEventListener('click', async function() {
            const commentId = this.dataset.commentId;
            
            if (!confirm('Supprimer ce commentaire ?')) return;
            
            try {
                const response = await fetch(`/comments/${commentId}`, {
                    method: 'DELETE'
                });

                const data = await response.json();

                if (data.success) {
                    // Supprimer le commentaire de l'UI
                    const commentElement = document.querySelector(`[data-comment-id="${commentId}"]`);
                    if (commentElement) {
                        commentElement.style.opacity = '0';
                        setTimeout(() => commentElement.remove(), 300);
                    }
                    showAlert('Commentaire supprim√©', 'success');
                } else {
                    throw new Error(data.error);
                }
            } catch (error) {
                console.error('Erreur:', error);
                showAlert('Erreur lors de la suppression', 'error');
            }
        });
    });

    // Fonction pour ajouter un commentaire √† l'UI
    function addCommentToUI(comment) {
        const commentElement = document.createElement('div');
        commentElement.className = 'comment-item p-3 border-bottom';
        commentElement.dataset.commentId = comment.id;
        commentElement.style.opacity = '0';
        
        commentElement.innerHTML = `
            <div class="d-flex justify-content-between align-items-start mb-2">
                <div class="d-flex align-items-center">
                    <div class="avatar-sm bg-primary text-white rounded-circle d-flex align-items-center justify-content-center me-2"
                         style="width: 32px; height: 32px; font-size: 0.8rem;">
                        ${comment.is_anonymous ? '?' : '{{getInitials user.username}}'}
                    </div>
                    <div>
                        <strong class="small">
                            ${comment.is_anonymous ? 'Anonyme' : comment.author}
                        </strong>
                    </div>
                </div>
                <small class="text-muted">√Ä l'instant</small>
            </div>
            <p class="mb-0 text-break">${escapeHtml(comment.content)}</p>
            {{#if isOwner}}
                <div class="mt-2 text-end">
                    <button class="btn btn-sm btn-outline-danger delete-comment" 
                            data-comment-id="${comment.id}"
                            title="Supprimer le commentaire">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            {{/if}}
        `;

        // Ajouter l'√©v√©nement de suppression
        const deleteBtn = commentElement.querySelector('.delete-comment');
        if (deleteBtn) {
            deleteBtn.addEventListener('click', function() {
                const commentId = this.dataset.commentId;
                if (!confirm('Supprimer ce commentaire ?')) return;
                deleteComment(commentId, commentElement);
            });
        }

        // Ins√©rer au d√©but de la liste
        const emptyState = commentsContainer.querySelector('.text-center');
        if (emptyState) {
            emptyState.remove();
        }
        
        commentsContainer.insertBefore(commentElement, commentsContainer.firstChild);
        
        // Animation d'apparition
        setTimeout(() => {
            commentElement.style.opacity = '1';
            commentElement.style.transition = 'opacity 0.3s ease';
        }, 10);
    }

// Fonction pour supprimer un commentaire
async function deleteComment(commentId, commentElement) {
    try {
        const response = await fetch(`/comments/${commentId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            }
        });

        const data = await response.json();

        if (data.success) {
            // Animation de suppression
            commentElement.style.opacity = '0';
            commentElement.style.transform = 'translateX(-100%)';
            commentElement.style.transition = 'all 0.3s ease';
            
            setTimeout(() => {
                commentElement.remove();
                
                // V√©rifier s'il reste des commentaires
                const commentsContainer = document.getElementById('commentsContainer');
                const remainingComments = commentsContainer.querySelectorAll('.comment-item');
                
                if (remainingComments.length === 0) {
                    // Afficher l'√©tat vide
                    commentsContainer.innerHTML = `
                        <div class="text-center py-4 text-muted">
                            <i class="fas fa-comments fa-2x mb-2 opacity-50"></i>
                            <p class="mb-0">Aucun commentaire</p>
                            <small>Soyez le premier √† commenter !</small>
                        </div>
                    `;
                }
            }, 300);
            
            showAlert('Commentaire supprim√© avec succ√®s', 'success');
        } else {
            throw new Error(data.error);
        }
    } catch (error) {
        console.error('Erreur suppression commentaire:', error);
        showAlert('Erreur lors de la suppression du commentaire', 'error');
    }
}


    // Fonction utilitaire pour √©chapper le HTML
    function escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    // Fonction pour afficher les alertes
    function showAlert(message, type) {
        // Votre syst√®me d'alertes existant
        console.log(`[${type}] ${message}`);
    }
});
</script>